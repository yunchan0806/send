import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from std_msgs.msg import String
from turtlesim.msg import Pose

class T_move(Node):
    def __init__(self):
        
        super().__init__('moveTurtleSim') # type: ignore
        
        self.create_timer(0.001, self.pub_callback)
        self.create_timer(0.01, self.update_callback)
        self.pub = self.create_publisher(Twist, 'turtle1/cmd_vel', 10)
        self.create_subscription(Pose, '/turtle1/pose', self.pose_callback, 10)

        self.flag = True
        self.thetaFlag = True

        self.x = 0.0
        self.z = 0.0
        self.npose_x = 0.0
        self.pose_x = 0.0
        
        self.npose_y = 0.0
        self.pose_y = 0.0

        self.pose_theta = 0.0
        self.npose_theta = 0.0

        self.pose_counter = 0.0

    def pose_callback(self, msg:Pose):
        self.get_logger().info(f"{msg.x},{msg.y},{msg.theta}")
        self.pose_x = msg.x
        self.pose_y = msg.y
        self.pose_theta = msg.theta
    def pub_callback(self):
        msg = Twist()
        msg.linear.x=self.x
        msg.angular.z=self.z
        self.pub.publish(msg)

    def update_callback(self):

        
        if(self.flag):
            self.flag = False
            self.npose_x = self.pose_x
            self.npose_theta = self.pose_theta
            self.npose_y = self.pose_y

            

            self.counter = 0.0

            self.z = 0.0
            self.x = 2.0
            
        self.pose_counter += 1
        if(self.pose_counter > 100):
            self.x = 0.0
            
            if self.thetaFlag:
                self.z = 1.0
                self.counter += 1
                if(self.counter > (502/2)):
                    self.flag = True
                    self.thetaFlag = False
                    self.z = 0.0
                    self.pose_counter = 0.0
                    
            else:
                self.z = -1.0
                self.counter += 1
                if(self.counter > (1004.8)/2):
                    self.flag = True
                    self.thetaFlag = True
                    self.z = 0.0
                    self.pose_counter = 0.0
            
            

def main():
    rclpy.init()
    node = T_move()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
